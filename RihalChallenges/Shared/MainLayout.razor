@inherits LayoutComponentBase
@inject NavigationManager navigationManager;

<MudThemeProvider Theme="_currentTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <AuthorizeView>
        <Authorized>
            <MudAppBar>


                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />

                <MudSpacer />
                @if (_isLightMode)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.ModeNight" Color="Color.Inherit" cEdge="Edge.End" OnClick="@ToggleTheme" />
                }
                else
                {
                    <MudIconButton Icon="@Icons.Material.Filled.LightMode" Color="Color.Inherit"  OnClick="@ToggleTheme" />
                }

                Logout
                <MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" OnClick="@Logout" />
            </MudAppBar>
            <MudDrawer @bind-Open="@_drawerOpen" Color="Color.Primary">
                <MudDrawerHeader>
                    <MudText Typo="Typo.h6">Rihal Challenges</MudText>
                 </MudDrawerHeader>
                <NavMenu></NavMenu>
            </MudDrawer>
            <MudMainContent>
                <MudContainer MaxWidth="MaxWidth.ExtraLarge">

                    @Body

                </MudContainer>
            </MudMainContent>
        </Authorized>
        <NotAuthorized>

                <MudContainer MaxWidth="MaxWidth.ExtraLarge">
                    <RihalChallenges.Pages.Login></RihalChallenges.Pages.Login>
                </MudContainer>

        </NotAuthorized>
    </AuthorizeView>


</MudLayout>

@code {

    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    bool authenticated;

    protected async override Task OnInitializedAsync()
    {

        var authState = await AuthStat;
        var user = authState.User;


        authenticated = user.Identity?.IsAuthenticated ?? false;
        
    }

    public void Logout()
    {
        navigationManager.NavigateTo("/Logout", true);
    }
}

@code {
    private bool _isLightMode = true;
    private MudTheme _currentTheme = new MudTheme();
    private bool _drawerOpen = false;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void ToggleTheme()
    {
        _isLightMode = !_isLightMode;

        if (!_isLightMode)
        {
            _currentTheme = GenerateDarkTheme();
        }
        else
        {
            _currentTheme = new MudTheme();
        }
    }

    private MudTheme GenerateDarkTheme() =>
        new MudTheme
            {
                Palette = new Palette()
                {
                    Black = "#27272f",
                    Background = "#32333d",
                    BackgroundGrey = "#27272f",
                    Surface = "#373740",
                    TextPrimary = "#ffffffb3",
                    TextSecondary = "rgba(255,255,255, 0.50)",
                    Primary = "#27272f",
                    AppbarBackground = "#27272f"

                }
            };
}